// Generated by L3P v1.4 BETA 20131202 (Win32)  (C) 1998-2013 Lars C. Hassing SP.lars@AM.hassings.dk
// L3P website:  http://www.hassings.dk/l3/l3p.html
// LDraw.org:    http://www.ldraw.org
// Date:         Sat Aug 23 20:53:40 2014
// Input file:   D:\Datsville RPG\trunk\povray_source\pov_main_project\items\helmet_013_castle_03.ldr
// Title:        Untitled
// Author:       MLCad
// ModelDir:     D:\Datsville RPG\trunk\povray_source\pov_main_project\items
// WorkDir:      D:\Datsville RPG\trunk\povray_source\pov_main_project\items
// LDRAWDIR:     E:\Programs Windows\LDraw (LDRAWDIR environment variable)
// SearchDirs:   (Default)
// SearchDir1:   D:\Datsville RPG\trunk\povray_source\pov_main_project\items\ (0x10)
// SearchDir2:   E:\Programs Windows\LDraw\P\ (0x9)
// SearchDir3:   E:\Programs Windows\LDraw\PARTS\ (0x4)
// SearchDir4:   E:\Programs Windows\LDraw\MODELS\ (0x0)
// ldconfig.ldr: E:\Programs Windows\LDraw\ldconfig.ldr
// Commandline:  "E:\Programs Windows\l3p14beta\l3p.exe" "D:\Datsville RPG\trunk\povray_source\pov_main_project\items\helmet_013_castle_03.ldr" "D:\Datsville RPG\trunk\povray_source\pov_main_project\items\helmet_013_castle_03.pov" -o -ic -il -ibitems.inc -iearmor_camera.inc

#if (version < 3.1)
	#error "This POV code requires at least version 3.1\n"
#end

//// Defines

#declare L3Version = 1.4;

#declare L3Quality = 2;  // Quality level, 0=BBox, 1=no refr, 2=normal, 3=studlogo, 4=stud2logo

#declare L3SW = 0.5;  // Width of seam between two bricks

#declare L3Studs = 1;  // 1=on 0=off

#declare L3Bumps = 0;  // 1=on 0=off


#declare L3Ambient = 0.4;
#declare L3Diffuse = 0.4;
#declare L3Ior     = 1.25;
#declare L3NormalBumps = normal { bumps 0.01 scale 20 }
#declare L3NormalSlope = normal { bumps 0.3 scale 0.5 }


#declare L3SWT = (L3SW ? L3SW : 0.001);  // At least a small seam when transparent

#declare L3Logo = union {
	sphere {<-59,0,-96>,6}
	cylinder {<-59,0,-96>,<59,0,-122>,6 open}
	sphere {<59,0,-122>,6}
	cylinder {<59,0,-122>,<59,0,-84>,6 open}
	sphere {<59,0,-84>,6}

	sphere {<-59,0,-36>,6}
	cylinder {<-59,0,-36>,<-59,0,1>,6 open}
	sphere {<-59,0,1>,6}
	cylinder {<0,0,-49>,<0,0,-25>,6 open}
	sphere {<0,0,-25>,6}
	sphere {<59,0,-62>,6}
	cylinder {<59,0,-62>,<59,0,-24>,6 open}
	sphere {<59,0,-24>,6}
	cylinder {<-59,0,-36>,<59,0,-62>,6 open}

	sphere {<-35.95,0,57>,6}
	torus {18.45,6 clipped_by{plane{<40,0,-9>,0}} translate<-40,0,39>}
	cylinder {<-44.05,0,21>,<35.95,0,3>,6 open}
	torus {18.45,6 clipped_by{plane{<-40,0,9>,0}} translate<40,0,21>}
	cylinder {<44.05,0,39>,<0,0,49>,6 open}
	sphere {<0,0,49>,6}
	cylinder {<0,0,49>,<0,0,34>,6 open}
	sphere {<0,0,34>,6}

	torus {18.45,6 clipped_by{plane{<40,0,-9>,0}} translate<-40,0,99>}
	cylinder {<-44.05,0,81>,<35.95,0,63>,6 open}
	torus {18.45,6 clipped_by{plane{<-40,0,9>,0}} translate<40,0,81>}
	cylinder {<44.05,0,99>,<-35.95,0,117>,6 open}

	scale 4.5/128
}


//// IncludeFile AtBeginning
#include "items.inc"



//// Finishes
#ifndef (L3FinishOpaque)
#declare L3FinishOpaque = finish {
	ambient L3Ambient
	diffuse L3Diffuse
	#if (L3Quality >= 2)
		phong 0.5
		phong_size 40
		reflection 0.08
	#end
}
#end

#ifndef (L3FinishChrome)
#declare L3FinishChrome = finish {
	ambient 0.25
	diffuse 0.6
	#if (L3Quality >= 2)
		brilliance 5
		metallic
		specular 0.80
		roughness 1/100
		reflection 0.65
	#end
}
#end

#ifndef (L3FinishPearlescent)
//Not supported yet, using Opaque
#declare L3FinishPearlescent = finish { L3FinishOpaque }
#end

#ifndef (L3FinishRubber)
#declare L3FinishRubber = finish {
	ambient L3Ambient
	diffuse L3Diffuse
	#if (L3Quality >= 2)
		phong 0.1
		phong_size 10
		reflection 0
	#end
}
#end

#ifndef (L3FinishMatte_metallic)
//Not supported yet, using Opaque
#declare L3FinishMatte_metallic = finish { L3FinishOpaque }
#end

#ifndef (L3FinishMetal)
//Not supported yet, using Opaque
#declare L3FinishMetal = finish { L3FinishOpaque }
#end

#ifndef (L3FinishTransparent)
#declare L3FinishTransparent = finish {
	ambient L3Ambient
	diffuse L3Diffuse
	#if (L3Quality >= 2)
		phong 0.5
		phong_size 40
		reflection 0.2
	#end
}
#end



//// Macros
#ifndef (L3TextureOpaqueRGB)
#macro L3TextureOpaqueRGB(r,g,b)
texture {
	pigment { rgb <r/255,g/255,b/255> }
	finish { L3FinishOpaque }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TextureChromeRGB)
#macro L3TextureChromeRGB(r,g,b)
texture {
	pigment { rgb <r/255,g/255,b/255> }
	finish { L3FinishChrome }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TexturePearlescentRGB)
#macro L3TexturePearlescentRGB(r,g,b)
texture {
	pigment { rgb <r/255,g/255,b/255> }
	finish { L3FinishPearlescent }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TextureRubberRGB)
#macro L3TextureRubberRGB(r,g,b)
texture {
	pigment { rgb <r/255,g/255,b/255> }
	finish { L3FinishRubber }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TextureMatte_metallicRGB)
#macro L3TextureMatte_metallicRGB(r,g,b)
texture {
	pigment { rgb <r/255,g/255,b/255> }
	finish { L3FinishMatte_metallic }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TextureMetalRGB)
#macro L3TextureMetalRGB(r,g,b)
texture {
	pigment { rgb <r/255,g/255,b/255> }
	finish { L3FinishMetal }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TextureTransparentRGBA)
#macro L3TextureTransparentRGBA(r,g,b,a)
// Alpha -> Filter: 255 -> 1.00, 128 -> 0.85, 0 -> 0
#local f = (a >= 128 ? 0.85 + (a-128) * 0.15 / (255-128) : a * 0.85 / 255);
texture {
	pigment { rgb <r/255,g/255,b/255> #if (L3Quality > 1) filter f #end }
	finish { L3FinishTransparent }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TextureSlope)
#macro L3TextureSlope(tex)
texture {
	tex
	#if (L3Quality > 1) normal { L3NormalSlope } #end
}
#end
#end

#ifndef (L3Material)
#macro L3Material(tex)
material {
	texture { tex }
}
#end
#end

#ifndef (L3MaterialT)
#macro L3MaterialT(tex)
material {
	texture { tex }
	#if (L3Quality > 1)
		interior { ior L3Ior }
	#end
}
#end
#end



//// Color 7 Light_Gray (from ldconfig.ldr)
#ifndef (L3Texture7)
#declare L3Texture7 = L3TextureOpaqueRGB(155,161,157)
#end
#ifndef (L3Texture7_slope)
#declare L3Texture7_slope = L3TextureSlope(L3Texture7)
#end
#ifndef (L3Color7)
#declare L3Color7 = L3Material(L3Texture7)
#end
#ifndef (L3Color7_slope)
#declare L3Color7_slope = L3Material(L3Texture7_slope)
#end


//// Color 8 Dark_Gray (from ldconfig.ldr)
#ifndef (L3Texture8)
#declare L3Texture8 = L3TextureOpaqueRGB(109,110,92)
#end
#ifndef (L3Texture8_slope)
#declare L3Texture8_slope = L3TextureSlope(L3Texture8)
#end
#ifndef (L3Color8)
#declare L3Color8 = L3Material(L3Texture8)
#end
#ifndef (L3Color8_slope)
#declare L3Color8_slope = L3Material(L3Texture8_slope)
#end


//// Primitive 2-4cyli.dat
#ifndef (_2_dash_4cyli_dot_dat)
#declare _2_dash_4cyli_dot_dat = cylinder { <0,0,0>, <0,1,0>, 1 open clipped_by { plane { -z, 0 } } }
#end // ifndef (_2_dash_4cyli_dot_dat)


//// Primitive 2-4disc.dat
#ifndef (_2_dash_4disc_dot_dat)
#declare _2_dash_4disc_dot_dat = disc { <0,0,0>, <0,1,0>, 1 clipped_by { box { <-2,-1,0>, <2,1,2> } } }
#end // ifndef (_2_dash_4disc_dot_dat)


//// Primitive 2-4ring1.dat
#ifndef (_2_dash_4ring1_dot_dat)
#declare _2_dash_4ring1_dot_dat = disc {
	<0,0,0>, <0,1,0>, 2, 1
	clipped_by { plane { -z, 0 } }
}
#end // ifndef (_2_dash_4ring1_dot_dat)


//// Primitive 2-4rin12.dat
#ifndef (_2_dash_4rin12_dot_dat)
#declare _2_dash_4rin12_dot_dat = disc {
	<0,0,0>, <0,1,0>, 13, 12
	clipped_by { plane { -z, 0 } }
}
#end // ifndef (_2_dash_4rin12_dot_dat)


//// Primitive 1-4cyli.dat
#ifndef (_1_dash_4cyli_dot_dat)
#declare _1_dash_4cyli_dot_dat = cylinder { <0,0,0>, <0,1,0>, 1 open clipped_by { plane { <-1,0,-1>, -sqrt(1/2) } } }
#end // ifndef (_1_dash_4cyli_dot_dat)


//// Primitive 1-4disc.dat
#ifndef (_1_dash_4disc_dot_dat)
#declare _1_dash_4disc_dot_dat = disc { <0,0,0>, <0,1,0>, 1 clipped_by { plane { -x, 0 } plane { -z, 0 } } }
#end // ifndef (_1_dash_4disc_dot_dat)


//// Primitive 4-4cyli.dat
#ifndef (_4_dash_4cyli_dot_dat)
#declare _4_dash_4cyli_dot_dat = cylinder { <0,0,0>, <0,1,0>, 1 open }
#end // ifndef (_4_dash_4cyli_dot_dat)


//// Primitive 4-4disc.dat
#ifndef (_4_dash_4disc_dot_dat)
#declare _4_dash_4disc_dot_dat = disc { <0,0,0>, <0,1,0>, 1 }
#end // ifndef (_4_dash_4disc_dot_dat)


//// Primitive 3-4disc.dat
#ifndef (_3_dash_4disc_dot_dat)
#declare _3_dash_4disc_dot_dat = disc {
	<0,0,0>, <0,1,0>, 1
	clipped_by { union { plane { x, 0 } plane { -z, 0 } } }
}
#end // ifndef (_3_dash_4disc_dot_dat)


//// Primitive 3-4cyli.dat
#ifndef (_3_dash_4cyli_dot_dat)
#declare _3_dash_4cyli_dot_dat = cylinder {
	<0,0,0>, <0,1,0>, 1 open
	clipped_by { plane { <1,0,-1>, sqrt(1/2) } }
}
#end // ifndef (_3_dash_4cyli_dot_dat)


//// Part s\4503s01.dat
#ifndef (s_slash_4503s01_dot_dat)
#declare s_slash_4503s01_dot_dat = #if (L3Quality = 0) box { <0,-12,-22.2>, <18,25.171,21> } #else union {
// ~Minifig Helmet Castle with Fixed Face Grille - Half
// Name: s\4503s01.dat
// Author: J.C. Tchang [tchang]
// !LDRAW_ORG Subpart UPDATE 2010-03
// !LICENSE Redistributable under CCAL version 2.0 : see CAreadme.txt
// BFC CERTIFY CW
// !HISTORY 2010-12-31 [PTadmin] Official Update 2010-03
// BFC INVERTNEXT
	object { _2_dash_4cyli_dot_dat matrix <0,0,6,0,-4,0,6,0,0,0,0,0> }
	object { _2_dash_4disc_dot_dat matrix <0,0,-6,0,-1,0,6,0,0,0,-4,0> }
	object { _2_dash_4ring1_dot_dat matrix <0,0,-6,0,-1,0,6,0,0,0,0,0> }
	object { _2_dash_4rin12_dot_dat matrix <0,0,-1,0,-1,0,1,0,0,0,0,0> }
// 
	object { _2_dash_4disc_dot_dat matrix <0,0,2,0,6,0,2,0,0,0,-4.2,7> }
// BFC INVERTNEXT
	object { _2_dash_4cyli_dot_dat matrix <0,0,2,0,7.8,0,2,0,0,0,-12,7> }
	object { _2_dash_4ring1_dot_dat matrix <0,0,2,0,1,0,2,0,0,0,-12,7> }
	object { _2_dash_4cyli_dot_dat matrix <0,0,4,0,6,0,4,0,0,0,-12,7> }
// 
	mesh {
		triangle { <6.123,-9.535,0>, <6.123,-8.373,-6.123>, <0,-9.535,-6.123> }
		triangle { <0,-9.535,-6.123>, <0,-10.6,0>, <6.123,-9.535,0> }
		triangle { <6.123,-8.373,-6.123>, <6.123,-5.746,-10.453>, <0,-6.499,-11.314> }
		triangle { <0,-6.499,-11.314>, <0,-9.535,-6.123>, <6.123,-8.373,-6.123> }
		triangle { <6.123,-5.746,-10.453>, <6.123,-1.958,-13.454>, <0,-1.958,-14.782> }
		triangle { <0,-1.958,-14.782>, <0,-6.499,-11.314>, <6.123,-5.746,-10.453> }
		triangle { <6.123,-1.958,-13.454>, <6.123,0.721,-14.118>, <0,0.721,-15.391> }
		triangle { <0,0.721,-15.391>, <0,-1.958,-14.782>, <6.123,-1.958,-13.454> }
		triangle { <11.314,-6.499,0>, <10.453,-5.746,-6.123>, <6.123,-8.373,-6.123> }
		triangle { <6.123,-8.373,-6.123>, <6.123,-9.535,0>, <11.314,-6.499,0> }
		triangle { <6.123,-8.373,-6.123>, <10.453,-5.746,-6.123>, <6.123,-5.746,-10.453> }
		triangle { <6.123,-5.746,-10.453>, <10.453,-5.746,-6.123>, <10.453,-1.958,-10.453> }
		triangle { <6.123,-5.746,-10.453>, <10.453,-1.958,-10.453>, <6.123,-1.958,-13.454> }
		triangle { <6.123,-1.958,-13.454>, <10.453,-1.958,-10.453>, <11.314,3.4,-11.314> }
		triangle { <11.314,3.4,-11.314>, <6.123,3.4,-14.782>, <6.123,-1.958,-13.454> }
		triangle { <14.782,-1.958,0>, <13.454,-1.958,-6.123>, <10.453,-5.746,-6.123> }
		triangle { <10.453,-5.746,-6.123>, <11.314,-6.499,0>, <14.782,-1.958,0> }
		triangle { <10.453,-5.746,-6.123>, <13.454,-1.958,-6.123>, <10.453,-1.958,-10.453> }
		triangle { <10.453,-1.958,-10.453>, <13.454,-1.958,-6.123>, <14.782,3.4,-6.123> }
		triangle { <14.782,3.4,-6.123>, <11.314,3.4,-11.314>, <10.453,-1.958,-10.453> }
		triangle { <16,3.4,0>, <14.782,3.4,-6.123>, <13.454,-1.958,-6.123> }
		triangle { <13.454,-1.958,-6.123>, <14.782,-1.958,0>, <16,3.4,0> }
		triangle { <2.4,-10.182,0>, <2.4,-9.079,6.123>, <6.123,-8.373,6.123> }
		triangle { <6.123,-8.373,6.123>, <6.123,-9.535,0>, <2.4,-10.182,0> }
		triangle { <3,-8.965,6.123>, <3,-6.13,10.892>, <6.123,-5.746,10.453> }
		triangle { <6.123,-5.746,10.453>, <6.123,-8.373,6.123>, <3,-8.965,6.123> }
		triangle { <0,-6.499,11.314>, <0,-1.958,14.782>, <6.123,-1.958,13.454> }
		triangle { <6.123,-1.958,13.454>, <6.123,-5.746,10.453>, <0,-6.499,11.314> }
		triangle { <0,-1.958,14.782>, <0,3.4,16>, <6.123,3.4,14.782> }
		triangle { <6.123,3.4,14.782>, <6.123,-1.958,13.454>, <0,-1.958,14.782> }
		triangle { <6.123,-9.535,0>, <6.123,-8.373,6.123>, <10.453,-5.746,6.123> }
		triangle { <10.453,-5.746,6.123>, <11.314,-6.499,0>, <6.123,-9.535,0> }
		triangle { <6.123,-8.373,6.123>, <6.123,-5.746,10.453>, <10.453,-5.746,6.123> }
		triangle { <6.123,-5.746,10.453>, <10.453,-1.958,10.453>, <10.453,-5.746,6.123> }
		triangle { <6.123,-5.746,10.453>, <6.123,-1.958,13.454>, <10.453,-1.958,10.453> }
		triangle { <6.123,3.4,14.782>, <11.314,3.4,11.314>, <10.453,-1.958,10.453> }
		triangle { <10.453,-1.958,10.453>, <6.123,-1.958,13.454>, <6.123,3.4,14.782> }
		triangle { <11.314,-6.499,0>, <10.453,-5.746,6.123>, <13.454,-1.958,6.123> }
		triangle { <13.454,-1.958,6.123>, <14.782,-1.958,0>, <11.314,-6.499,0> }
		triangle { <10.453,-5.746,6.123>, <10.453,-1.958,10.453>, <13.454,-1.958,6.123> }
		triangle { <11.314,3.4,11.314>, <14.782,3.4,6.123>, <13.454,-1.958,6.123> }
		triangle { <13.454,-1.958,6.123>, <10.453,-1.958,10.453>, <11.314,3.4,11.314> }
		triangle { <14.782,-1.958,0>, <13.454,-1.958,6.123>, <14.782,3.4,6.123> }
		triangle { <14.782,3.4,6.123>, <16,3.4,0>, <14.782,-1.958,0> }
// 
		triangle { <0,20.8,16>, <0,20.8,15>, <3,20.8,15> }
		triangle { <3,20.8,15>, <3,20.8,16>, <0,20.8,16> }
		triangle { <3,20.8,16>, <3,10.027,20.239>, <0,10.027,20.239> }
		triangle { <0,10.027,20.239>, <0,20.8,16>, <3,20.8,16> }
		triangle { <3,10.027,20.239>, <3,6.2,21>, <0,6.2,21> }
		triangle { <0,6.2,21>, <0,10.027,20.239>, <3,10.027,20.239> }
		triangle { <3,-2,21>, <0,-2,21>, <0,6.2,21> }
		triangle { <0,6.2,21>, <3,6.2,21>, <3,-2,21> }
	}
	object { _1_dash_4cyli_dot_dat matrix <0,-10,0,-3,0,0,0,0,10,3,-2,11> }
	mesh {
		triangle { <0,-12,11>, <3,-12,11>, <1.531,-12,10.696> }
		triangle { <2.828,-12,9.828>, <1.531,-12,10.696>, <3,-12,11> }
		triangle { <2.828,-12,9.828>, <3,-12,11>, <3,-12,9.572> }
		triangle { <2.4,-12,-2.9>, <0,-12,-2.9>, <0,-12,3> }
		triangle { <0,-12,3>, <1.531,-12,3.304>, <2.4,-12,-2.9> }
		triangle { <2.4,-12,3.87>, <2.4,-12,-2.9>, <1.531,-12,3.304> }
	}
	object { _1_dash_4cyli_dot_dat matrix <0,-12,0,2.4,0,0,0,0,-12,0,0,-2.9> }
// 
	mesh {
		triangle { <2.4,-8,3.885>, <2.4,-8,-2.9>, <2.4,-12,-2.9> }
		triangle { <2.4,-12,-2.9>, <2.4,-12,3.885>, <2.4,-8,3.885> }
		triangle { <2.4,-8.485,-11.385>, <2.4,-11.087,-7.492>, <2.4,-12,-2.9> }
		triangle { <2.4,-12,-2.9>, <2.4,-8,-2.9>, <2.4,-8.485,-11.385> }
		triangle { <2.4,0,-14.9>, <2.4,-4.592,-13.987>, <2.4,-8.485,-11.385> }
		triangle { <2.4,-8.485,-11.385>, <2.4,-8,-2.9>, <2.4,0,-14.9> }
		triangle { <3,10.027,20.239>, <3,20.8,16>, <3,20.8,15> }
		triangle { <3,20.8,15>, <3,6.2,13.8>, <3,10.027,20.239> }
		triangle { <3,6.2,21>, <3,10.027,20.239>, <3,6.2,13.8> }
		triangle { <3,6.2,21>, <3,6.2,13.8>, <3,-2,13.8> }
		triangle { <3,-2,13.8>, <3,-2,21>, <3,6.2,21> }
	}
	object { _1_dash_4disc_dot_dat matrix <0,-10,0,-10,0,0,0,0,10,3,-2,11> }
	mesh {
		triangle { <3,-2,11>, <3,-2,9.572>, <3,-12,9.572> }
		triangle { <3,-12,9.572>, <3,-12,11>, <3,-2,11> }
// 
// 
		triangle { <0,24.594,13>, <0,0,13>, <4.975,0,12.011> }
		triangle { <4.975,0,12.011>, <4.975,24.398,12.011>, <0,24.594,13> }
		triangle { <6.123,24.929,14.782>, <6.123,3.4,14.782>, <0,3.4,16> }
		triangle { <0,3.4,16>, <0,25.171,16>, <6.123,24.929,14.782> }
		triangle { <4.975,24.398,12.011>, <4.975,0,12.011>, <9.192,0,9.192> }
		triangle { <9.192,0,9.192>, <9.192,23.837,9.192>, <4.975,24.398,12.011> }
		triangle { <11.314,24.239,11.314>, <11.314,3.4,11.314>, <6.123,3.4,14.782> }
		triangle { <6.123,3.4,14.782>, <6.123,24.929,14.782>, <11.314,24.239,11.314> }
		triangle { <9.192,23.837,9.192>, <9.192,0,9.192>, <12.011,0,4.975> }
		triangle { <12.011,0,4.975>, <9.695,23.688,8.44>, <9.192,23.837,9.192> }
		triangle { <13.167,23.688,8.54>, <14.782,3.4,6.123>, <11.314,3.4,11.314> }
		triangle { <11.314,3.4,11.314>, <11.314,24.239,11.314>, <13.167,23.688,8.54> }
		triangle { <12.011,0,4.975>, <12.011,23.46,4.975>, <9.695,23.688,8.44> }
		triangle { <14.782,3.4,6.123>, <13.167,23.688,8.54>, <14.782,23.529,6.123> }
		triangle { <12.011,23.46,4.975>, <12.011,0,4.975>, <13,0,0> }
		triangle { <13,0,0>, <13,23.132,0>, <12.011,23.46,4.975> }
		triangle { <16,23.125,0>, <16,3.4,0>, <14.782,3.4,6.123> }
		triangle { <14.782,3.4,6.123>, <14.782,23.529,6.123>, <16,23.125,0> }
		triangle { <14.782,7.8,-6.123>, <14.782,3.4,-6.123>, <16,3.4,0> }
		triangle { <16,3.4,0>, <16,7.8,0>, <14.782,7.8,-6.123> }
		triangle { <13,23.132,0>, <13,0,0>, <12.011,0,-4.975> }
		triangle { <12.011,0,-4.975>, <12.602,23,-2>, <13,23.132,0> }
		triangle { <15.622,23,-1.9>, <14.782,13,-6.123>, <16,13,0> }
		triangle { <16,13,0>, <16,23.125,0>, <15.622,23,-1.9> }
		triangle { <12.011,0,-4.975>, <12.011,23.196,-4.975>, <12.602,23,-2> }
		triangle { <14.782,13,-6.123>, <15.622,23,-1.9>, <14.782,23.278,-6.123> }
		triangle { <12.011,23.196,-4.975>, <12.011,15.037,-4.975>, <10,16.669,-7.988> }
		triangle { <10,16.669,-7.988>, <9.192,23.474,-9.192>, <12.011,23.196,-4.975> }
		triangle { <10,4.931,-7.988>, <12.011,6.563,-4.975>, <12.011,0,-4.975> }
		triangle { <12.011,0,-4.975>, <9.192,0,-9.192>, <10,4.931,-7.988> }
		triangle { <9.192,23.474,-9.192>, <10,16.669,-7.988>, <10,4.931,-7.988> }
		triangle { <10,4.931,-7.988>, <9.192,0,-9.192>, <9.192,23.474,-9.192> }
		triangle { <11.314,23.62,-11.314>, <11.314,18,-11.314>, <14.782,14,-6.123> }
		triangle { <14.782,14,-6.123>, <14.782,23.278,-6.123>, <11.314,23.62,-11.314> }
		triangle { <14.782,3.4,-6.123>, <14.782,7.8,-6.123>, <11.314,4,-11.314> }
		triangle { <11.314,4,-11.314>, <11.314,3.4,-11.314>, <14.782,3.4,-6.123> }
		triangle { <9.192,23.474,-9.192>, <6,18.932,-11.326>, <4.975,19.167,-12.011> }
		triangle { <4.975,19.167,-12.011>, <4.975,23.66,-12.011>, <9.192,23.474,-9.192> }
		triangle { <4.975,2.433,-12.011>, <6,2.668,-11.326>, <9.192,0,-9.192> }
		triangle { <9.192,0,-9.192>, <4.975,0,-12.011>, <4.975,2.433,-12.011> }
		triangle { <6,18.932,-11.326>, <9.192,23.474,-9.192>, <9.192,0,-9.192> }
		triangle { <9.192,0,-9.192>, <6,2.668,-11.326>, <6,18.932,-11.326> }
		triangle { <9.778,23.688,-12.34>, <6.123,20,-14.782>, <11.314,18,-11.314> }
		triangle { <11.314,18,-11.314>, <11.314,23.62,-11.314>, <9.778,23.688,-12.34> }
		triangle { <6.123,20,-14.782>, <9.778,23.688,-12.34>, <6.123,24.173,-14.782> }
		triangle { <4.975,23.66,-12.011>, <4.975,19.167,-12.011>, <2,19.851,-12.602> }
		triangle { <2,19.851,-12.602>, <2.816,23.688,-12.44>, <4.975,23.66,-12.011> }
		triangle { <2,19.851,-12.602>, <0,23.799,-13>, <2.816,23.688,-12.44> }
		triangle { <0,23.799,-13>, <2,19.851,-12.602>, <2,1.749,-12.602> }
		triangle { <2,1.749,-12.602>, <0,0,-13>, <0,23.799,-13> }
		triangle { <0,0,-13>, <2,1.749,-12.602>, <4.975,2.433,-12.011> }
		triangle { <4.975,2.433,-12.011>, <4.975,0,-12.011>, <0,0,-13> }
		triangle { <0,24.415,-16>, <0,20,-16>, <6.123,20,-14.782> }
		triangle { <6.123,20,-14.782>, <6.123,24.173,-14.782>, <0,24.415,-16> }
// 
// 
		triangle { <0,25.171,16>, <0,24.594,13>, <4.975,24.398,12.011> }
		triangle { <4.975,24.398,12.011>, <6.123,24.929,14.782>, <0,25.171,16> }
		triangle { <6.123,24.929,14.782>, <4.975,24.398,12.011>, <9.192,23.837,9.192> }
		triangle { <9.192,23.837,9.192>, <11.314,24.239,11.314>, <6.123,24.929,14.782> }
		triangle { <11.314,24.239,11.314>, <9.192,23.837,9.192>, <9.695,23.688,8.44> }
		triangle { <9.695,23.688,8.44>, <13.167,23.688,8.54>, <11.314,24.239,11.314> }
		triangle { <13.167,23.688,8.54>, <9.695,23.688,8.44>, <12.011,23.46,4.975> }
		triangle { <12.011,23.46,4.975>, <14.782,23.529,6.123>, <13.167,23.688,8.54> }
		triangle { <14.782,23.529,6.123>, <12.011,23.46,4.975>, <13,23.132,0> }
		triangle { <13,23.132,0>, <16,23.125,0>, <14.782,23.529,6.123> }
		triangle { <16,23.125,0>, <13,23.132,0>, <12.602,23,-2> }
		triangle { <12.602,23,-2>, <15.622,23,-1.9>, <16,23.125,0> }
		triangle { <15.622,23,-1.9>, <12.602,23,-2>, <12.011,23.196,-4.975> }
		triangle { <12.011,23.196,-4.975>, <14.782,23.278,-6.123>, <15.622,23,-1.9> }
		triangle { <14.782,23.278,-6.123>, <12.011,23.196,-4.975>, <9.192,23.474,-9.192> }
		triangle { <9.192,23.474,-9.192>, <11.314,23.62,-11.314>, <14.782,23.278,-6.123> }
		triangle { <11.314,23.62,-11.314>, <9.192,23.474,-9.192>, <4.975,23.66,-12.011> }
		triangle { <4.975,23.66,-12.011>, <9.778,23.688,-12.34>, <11.314,23.62,-11.314> }
		triangle { <4.975,23.66,-12.011>, <2.816,23.688,-12.44>, <9.778,23.688,-12.34> }
		triangle { <6.123,24.173,-14.782>, <9.778,23.688,-12.34>, <2.816,23.688,-12.44> }
		triangle { <2.816,23.688,-12.44>, <0,23.799,-13>, <6.123,24.173,-14.782> }
		triangle { <0,23.799,-13>, <0,24.415,-16>, <6.123,24.173,-14.782> }
// 
	}
	object { _4_dash_4cyli_dot_dat matrix <0,0,-4,-1,0,0,0,-4,0,18,10.8,-1.2> }
	object { _4_dash_4disc_dot_dat matrix <0,0,-4,-4,0,0,0,-4,0,18,10.8,-1.2> }
	object { _3_dash_4disc_dot_dat matrix <0,-3.67696,-3.67696,-0.4,0,0,0,-3.67696,3.67696,17,10.8,-1.2> }
// 
	mesh {
		triangle { <0,1.033,-18.967>, <2.125,1.183,-18.817>, <2,1.749,-18.251> }
		triangle { <2,1.749,-18.251>, <0,1.608,-18.392>, <0,1.033,-18.967> }
		triangle { <2.125,1.183,-18.817>, <6.375,2.16,-17.84>, <6,2.668,-17.332> }
		triangle { <6,2.668,-17.332>, <2,1.749,-18.251>, <2.125,1.183,-18.817> }
		triangle { <6.375,2.16,-17.84>, <10.625,4.564,-15.436>, <10,4.931,-15.069> }
		triangle { <10,4.931,-15.069>, <6,2.668,-17.332>, <6.375,2.16,-17.84> }
		triangle { <10.625,4.564,-15.436>, <13.494,6.893,-13.107>, <12.7,7.123,-12.877> }
		triangle { <12.7,7.123,-12.877>, <10,4.931,-15.069>, <10.625,4.564,-15.436> }
		triangle { <13.494,6.893,-13.107>, <17,10.8,-9.2>, <16,10.8,-9.2> }
		triangle { <16,10.8,-9.2>, <12.7,7.123,-12.877>, <13.494,6.893,-13.107> }
		triangle { <2.125,1.183,-18.817>, <0,1.033,-18.967>, <0,-2.467,-16> }
		triangle { <0,-2.467,-16>, <2.125,-2.317,-15.85>, <2.125,1.183,-18.817> }
		triangle { <2.125,-2.317,-15.85>, <6.375,-1.34,-14.873>, <6.375,2.16,-17.84> }
		triangle { <6.375,2.16,-17.84>, <2.125,1.183,-18.817>, <2.125,-2.317,-15.85> }
		triangle { <6.375,-1.34,-14.873>, <10.625,1.064,-12.469>, <10.625,4.564,-15.436> }
		triangle { <10.625,4.564,-15.436>, <6.375,2.16,-17.84>, <6.375,-1.34,-14.873> }
		triangle { <10.625,1.064,-12.469>, <13.494,3.393,-10.14>, <13.494,6.893,-13.107> }
		triangle { <13.494,6.893,-13.107>, <10.625,4.564,-15.436>, <10.625,1.064,-12.469> }
		triangle { <13.494,3.393,-10.14>, <17,7.3,-6.233>, <17,10.8,-9.2> }
		triangle { <17,10.8,-9.2>, <13.494,6.893,-13.107>, <13.494,3.393,-10.14> }
// 
// 
		triangle { <0,-2.467,-14>, <1.75,-2.317,-13.881>, <0,-2.467,-16> }
		triangle { <1.75,-2.317,-13.881>, <2.125,-2.317,-15.85>, <0,-2.467,-16> }
		triangle { <1.75,-2.317,-13.881>, <5.25,-1.34,-13.104>, <2.125,-2.317,-15.85> }
		triangle { <5.25,-1.34,-13.104>, <6.375,-1.34,-14.873>, <2.125,-2.317,-15.85> }
		triangle { <5.25,-1.34,-13.104>, <8.75,1.064,-11.192>, <6.375,-1.34,-14.873> }
		triangle { <8.75,1.064,-11.192>, <10.625,1.064,-12.469>, <6.375,-1.34,-14.873> }
		triangle { <8.75,1.064,-11.192>, <11.113,3.393,-9.34>, <10.625,1.064,-12.469> }
		triangle { <11.113,3.393,-9.34>, <13.494,3.393,-10.14>, <10.625,1.064,-12.469> }
		triangle { <11.113,3.393,-9.34>, <14,7.3,-6.233>, <13.494,3.393,-10.14> }
		triangle { <14,7.3,-6.233>, <17,7.3,-6.233>, <13.494,3.393,-10.14> }
// 
		triangle { <1.75,23.917,-14.881>, <0,24.067,-16>, <2.125,23.917,-15.85> }
		triangle { <1.75,23.917,-14.881>, <2.125,23.917,-15.85>, <5.25,22.94,-13.104> }
		triangle { <5.25,22.94,-13.104>, <2.125,23.917,-15.85>, <6.375,22.94,-14.873> }
		triangle { <5.25,22.94,-13.104>, <6.375,22.94,-14.873>, <8.75,20.536,-11.192> }
		triangle { <8.75,20.536,-11.192>, <6.375,22.94,-14.873>, <10.625,20.536,-12.469> }
		triangle { <8.75,20.536,-11.192>, <10.625,20.536,-12.469>, <11.113,18.207,-9.34> }
		triangle { <11.113,18.207,-9.34>, <10.625,20.536,-12.469>, <13.494,18.207,-10.14> }
		triangle { <11.113,18.207,-9.34>, <13.494,18.207,-10.14>, <14,14.3,-6.233> }
		triangle { <14,14.3,-6.233>, <13.494,18.207,-10.14>, <17,14.3,-6.233> }
// 
// 
		triangle { <17,10.8,0>, <17,10.8,-9.2>, <17,7.3,-6.233> }
		triangle { <17,7.3,-6.233>, <17,7.123,-4.877>, <17,10.8,0> }
		triangle { <14,7.3,-6.233>, <14,7.123,-4.877>, <17,7.123,-4.877> }
		triangle { <17,7.123,-4.877>, <17,7.3,-6.233>, <14,7.3,-6.233> }
	}
	object { _3_dash_4cyli_dot_dat matrix <0,-3.677,-3.677,-2,0,0,0,-3.677,3.677,17,10.8,-1.2> }
// 
	mesh {
		triangle { <0,19.992,-18.392>, <2,19.851,-18.251>, <2.125,20.417,-18.817> }
		triangle { <2.125,20.417,-18.817>, <0,20.567,-18.967>, <0,19.992,-18.392> }
		triangle { <2,19.851,-18.251>, <6,18.932,-17.332>, <6.375,19.44,-17.84> }
		triangle { <6.375,19.44,-17.84>, <2.125,20.417,-18.817>, <2,19.851,-18.251> }
		triangle { <6,18.932,-17.332>, <10,16.669,-15.069>, <10.625,17.036,-15.436> }
		triangle { <10.625,17.036,-15.436>, <6.375,19.44,-17.84>, <6,18.932,-17.332> }
		triangle { <10,16.669,-15.069>, <12.7,14.477,-12.877>, <13.494,14.707,-13.107> }
		triangle { <13.494,14.707,-13.107>, <10.625,17.036,-15.436>, <10,16.669,-15.069> }
		triangle { <12.7,14.477,-12.877>, <16,10.8,-9.2>, <17,10.8,-9.2> }
		triangle { <17,10.8,-9.2>, <13.494,14.707,-13.107>, <12.7,14.477,-12.877> }
		triangle { <2.125,23.917,-15.85>, <0,24.067,-16>, <0,20.567,-18.967> }
		triangle { <0,20.567,-18.967>, <2.125,20.417,-18.817>, <2.125,23.917,-15.85> }
		triangle { <2.125,20.417,-18.817>, <6.375,19.44,-17.84>, <6.375,22.94,-14.873> }
		triangle { <6.375,22.94,-14.873>, <2.125,23.917,-15.85>, <2.125,20.417,-18.817> }
		triangle { <6.375,19.44,-17.84>, <10.625,17.036,-15.436>, <10.625,20.536,-12.469> }
		triangle { <10.625,20.536,-12.469>, <6.375,22.94,-14.873>, <6.375,19.44,-17.84> }
		triangle { <10.625,17.036,-15.436>, <13.494,14.707,-13.107>, <13.494,18.207,-10.14> }
		triangle { <13.494,18.207,-10.14>, <10.625,20.536,-12.469>, <10.625,17.036,-15.436> }
		triangle { <13.494,14.707,-13.107>, <17,10.8,-9.2>, <17,14.3,-6.233> }
		triangle { <17,14.3,-6.233>, <13.494,18.207,-10.14>, <13.494,14.707,-13.107> }
// 
// 
		triangle { <17,14.477,-4.877>, <17,14.3,-6.233>, <17,10.8,-9.2> }
		triangle { <17,10.8,-9.2>, <17,10.8,0>, <17,14.477,-4.877> }
		triangle { <17,14.3,-6.233>, <17,14.477,-4.877>, <14,14.477,-4.877> }
		triangle { <14,14.477,-4.877>, <14,14.3,-6.233>, <17,14.3,-6.233> }
// 
// 
		triangle { <0,5.825,-21.21>, <2,5.902,-21.026>, <2,10.8,-22> }
		triangle { <2,10.8,-22>, <0,10.8,-22.2>, <0,5.825,-21.21> }
		triangle { <6,6.399,-19.825>, <10,7.624,-16.868>, <10,10.8,-17.5> }
		triangle { <10,10.8,-17.5>, <6,10.8,-20.7>, <6,6.399,-19.825> }
		triangle { <2,10.8,-22>, <2,5.902,-21.026>, <2,5.902,-12.602> }
		triangle { <2,5.902,-12.602>, <2,10.8,-12.602>, <2,10.8,-22> }
		triangle { <6,10.8,-11.326>, <6,6.399,-11.326>, <6,6.399,-19.825> }
		triangle { <6,6.399,-19.825>, <6,10.8,-20.7>, <6,10.8,-11.326> }
		triangle { <10,10.8,-17.5>, <10,7.624,-16.868>, <10,7.624,-7.984> }
		triangle { <10,7.624,-7.984>, <10,10.8,-7.984>, <10,10.8,-17.5> }
		triangle { <2,5.902,-21.026>, <0,5.825,-21.21>, <0,1.608,-18.392> }
		triangle { <0,1.608,-18.392>, <2,1.749,-18.251>, <2,5.902,-21.026> }
		triangle { <10,7.624,-16.868>, <6,6.399,-19.825>, <6,2.668,-17.332> }
		triangle { <6,2.668,-17.332>, <10,4.931,-15.069>, <10,7.624,-16.868> }
		triangle { <2,5.902,-21.026>, <2,1.749,-18.251>, <2,1.749,-12.602> }
		triangle { <2,1.749,-12.602>, <2,5.902,-12.602>, <2,5.902,-21.026> }
		triangle { <6,6.399,-11.326>, <6,2.668,-11.326>, <6,2.668,-17.332> }
		triangle { <6,2.668,-17.332>, <6,6.399,-19.825>, <6,6.399,-11.326> }
		triangle { <10,7.624,-16.868>, <10,4.931,-15.069>, <10,4.931,-7.984> }
		triangle { <10,4.931,-7.984>, <10,7.624,-7.984>, <10,7.624,-16.868> }
		triangle { <2,1.749,-18.251>, <6,2.668,-17.332>, <4.975,2.433,-12.011> }
		triangle { <4.975,2.433,-12.011>, <2,1.749,-12.602>, <2,1.749,-18.251> }
		triangle { <6,2.668,-17.332>, <6,2.668,-11.326>, <4.975,2.433,-12.011> }
		triangle { <10,4.931,-15.069>, <12.7,7.123,-12.877>, <12.011,6.563,-4.975> }
		triangle { <12.011,6.563,-4.975>, <10,4.931,-7.984>, <10,4.931,-15.069> }
		triangle { <12.7,7.123,-12.877>, <12.7,7.123,-4.975>, <12.011,6.563,-4.975> }
		triangle { <12.7,7.123,-12.877>, <16,10.8,-9.2>, <16,10.8,-4.975> }
		triangle { <16,10.8,-4.975>, <12.7,7.123,-4.975>, <12.7,7.123,-12.877> }
		triangle { <12.7,7.123,-4.975>, <16,10.8,-4.975>, <12.7,10.8,-4.975> }
		triangle { <12.7,7.123,-4.975>, <12.7,10.8,-4.975>, <12.011,10.8,-4.975> }
		triangle { <12.011,10.8,-4.975>, <12.011,6.563,-4.975>, <12.7,7.123,-4.975> }
// 
		triangle { <0,10.8,-22.2>, <2,10.8,-22>, <2,15.698,-21.026> }
		triangle { <2,15.698,-21.026>, <0,15.775,-21.21>, <0,10.8,-22.2> }
		triangle { <6,10.8,-20.7>, <10,10.8,-17.5>, <10,13.976,-16.868> }
		triangle { <10,13.976,-16.868>, <6,15.201,-19.825>, <6,10.8,-20.7> }
		triangle { <2,10.8,-12.602>, <2,15.698,-12.602>, <2,15.698,-21.026> }
		triangle { <2,15.698,-21.026>, <2,10.8,-22>, <2,10.8,-12.602> }
		triangle { <6,10.8,-20.7>, <6,15.201,-19.825>, <6,15.201,-11.326> }
		triangle { <6,15.201,-11.326>, <6,10.8,-11.326>, <6,10.8,-20.7> }
		triangle { <10,10.8,-7.984>, <10,13.976,-7.984>, <10,13.976,-16.868> }
		triangle { <10,13.976,-16.868>, <10,10.8,-17.5>, <10,10.8,-7.984> }
		triangle { <2,19.851,-18.251>, <0,19.992,-18.392>, <0,15.775,-21.21> }
		triangle { <0,15.775,-21.21>, <2,15.698,-21.026>, <2,19.851,-18.251> }
		triangle { <10,16.669,-15.069>, <6,18.932,-17.332>, <6,15.201,-19.825> }
		triangle { <6,15.201,-19.825>, <10,13.976,-16.868>, <10,16.669,-15.069> }
		triangle { <2,15.698,-12.602>, <2,19.851,-12.602>, <2,19.851,-18.251> }
		triangle { <2,19.851,-18.251>, <2,15.698,-21.026>, <2,15.698,-12.602> }
		triangle { <6,15.201,-19.825>, <6,18.932,-17.332>, <6,18.932,-11.326> }
		triangle { <6,18.932,-11.326>, <6,15.201,-11.326>, <6,15.201,-19.825> }
		triangle { <10,13.976,-7.984>, <10,16.669,-7.984>, <10,16.669,-15.069> }
		triangle { <10,16.669,-15.069>, <10,13.976,-16.868>, <10,13.976,-7.984> }
		triangle { <2,19.851,-12.602>, <4.975,19.167,-12.011>, <6,18.932,-17.332> }
		triangle { <6,18.932,-17.332>, <2,19.851,-18.251>, <2,19.851,-12.602> }
		triangle { <6,18.932,-17.332>, <4.975,19.167,-12.011>, <6,18.932,-11.326> }
		triangle { <10,16.669,-7.984>, <12.011,15.037,-4.975>, <12.7,14.477,-12.877> }
		triangle { <12.7,14.477,-12.877>, <10,16.669,-15.069>, <10,16.669,-7.984> }
		triangle { <12.7,14.477,-12.877>, <12.011,15.037,-4.975>, <12.7,14.477,-4.975> }
		triangle { <12.7,14.477,-4.975>, <16,10.8,-4.975>, <16,10.8,-9.2> }
		triangle { <16,10.8,-9.2>, <12.7,14.477,-12.877>, <12.7,14.477,-4.975> }
		triangle { <12.7,14.477,-4.975>, <12.7,10.8,-4.975>, <16,10.8,-4.975> }
		triangle { <12.011,15.037,-4.975>, <12.011,10.8,-4.975>, <12.7,10.8,-4.975> }
		triangle { <12.7,10.8,-4.975>, <12.7,14.477,-4.975>, <12.011,15.037,-4.975> }
	}
}
#end
#end // ifndef (s_slash_4503s01_dot_dat)


//// Part 4503.dat
#ifndef (_4503_dot_dat)
#declare _4503_dot_dat = #if (L3Quality = 0) box { <-18,-12,-22.2>, <18,25.171,21> } #else union {
// Minifig Helmet Castle with Fixed Face Grille
// Name: 4503.dat
// Author: J.C. Tchang [tchang]
// !LDRAW_ORG Part UPDATE 2012-03
// !LICENSE Redistributable under CCAL version 2.0 : see CAreadme.txt
// BFC CERTIFY CW
// !CATEGORY Minifig Headwear
// !HISTORY 2010-12-31 [PTadmin] Official Update 2010-03
// !HISTORY 2012-12-24 [cwdee] Update category
// !HISTORY 2012-12-28 [PTadmin] Official Update 2012-03
	object { s_slash_4503s01_dot_dat matrix <1,0,0,0,1,0,0,0,1,0,0,0> }
	object { s_slash_4503s01_dot_dat matrix <-1,0,0,0,1,0,0,0,1,0,0,0> }
}
#end
#end // ifndef (_4503_dot_dat)


//// Model helmet_013_castle_03.ldr
#ifndef (helmet__013__castle__03_dot_ldr)
#declare helmet__013__castle__03_dot_ldr = object {
// Untitled
// Name: helmet_013_castle_03.ldr
// Author: MLCad
// Unofficial Model
// ROTATION CENTER 0 0 0 1 "Custom"
// ROTATION CONFIG 0 0
	// 1 8  0 -6 -4  1 0 0  0 1 0  0 0 1 4503.dat
	object {
		_4503_dot_dat
		matrix <1-L3SW/36,0,0,0,1-L3SW/37.171,0,0,0,1-L3SW/43.2,0,L3SW/5.64437,L3SW/-72>
		matrix <1,0,0,0,1,0,0,0,1,0,-6,-4>
		material { L3Color8 }
	}
}
#end // ifndef (helmet__013__castle__03_dot_ldr)


//// ModelData
#declare L3ModelBBoxMin = <-18,-18,-26.2>;
#declare L3ModelBBoxMax = <18,19.171,17>;
#declare L3ModelBBoxCenter = (L3ModelBBoxMin+L3ModelBBoxMax)/2; // <0,0.5855,-4.6>
#declare L3ModelBBoxSize = L3ModelBBoxMax-L3ModelBBoxMin; // <36,37.171,43.2>
#declare L3FloorY = L3ModelBBoxMax.y;

//// ModelObject helmet_013_castle_03.ldr
object { helmet__013__castle__03_dot_ldr }



//// Statistics
//               PARTS             P         Total
// DAT files:        3            14            18
// POV Equivs:       -            10 (71%)
// Model has 2 parts (0 studs)

//// IncludeFile AtEnd
#include "armor_camera.inc"

//// End
