#version 3.7

// Ldraw Minifig "Machinima" Alpha 0.102i
// POVray include by Miguel Agullo
// Based on code
// Generated by L3P v1.3 20010120  (C) 1998-2001 Lars C. Hassing  lch@ccieurope.com (http://www.hassings.dk/l3/l3p.html)
// and code by Steve Krass   
// and Friedrich A. Lohmüller (http://www.f-lohmueller.de/index.htm)
//

//
//
//To use,
//
//MAKE SURE YOU PLACE THIS FILE IN ONE OF YOUR POVRAY INCLUDE PATHS (CHECK THE POVRAY HELP)
//(or in the same directory the POV file that you are rending)


//******************************************************************************************************
//  1. Create a Ldraw with a minifig and save it
//     For now, the minifig has to be placed at exact coordinates 0,0,0 
//     Additionally, the include only supports one minifig per scene
//     and no accesories other than hats
//     See further down how to integrate a scene for the minifig to walk inside


//******************************************************************************************************
//  2. Export the Ldraw file with the minifig to POVray with L3P  (don't render it yet!)


//******************************************************************************************************
//  3. Open the Povray file


//******************************************************************************************************
//  4. Comment out the last object before the background, floor, camera o lights statements
//     (Generally called "yourfilenamehere_dot_dat")


//******************************************************************************************************
//  5. In the same file & location, type the line 
//      #include "LMM_A01.inc"


//******************************************************************************************************
//  6. To render an animation in POV,
//     you have to set certain command line or .ini file settings
//     The first two basic values are 
//     +KFI and +KI (or Initial_Frame and initial_clock)
//     For the time being, set them both to 0
//     Then comes +KFF (or Final_Frame)
//     The number of frames in the animation will be  Final_Frame - Initial_Frame
//     Because video does not have a constant frame rate,
//     this number needs to be adjusted according to our need
//     (i.e. depending on how long do we want the shot to be)
//     The one other command line setting we need to adjust is
//     +KF (Or Final_Clock)
//     This setting is key for LM
//     The minfig will take one step for each integer Final_Clock value
//
//     For instance,
//
//     +KFI1 +KFF48 +KI0 +KF2
//
//     Will make the minifig take 2 steps in 48 frames
//    (which will be a two-second movie if projected at 24 frames per second)  
//
//
//     Consult POVray's help file for more information


//******************************************************************************************************
//  7. Once you have set the correct values, you can render the animation


// 8. The include is not capable of reading the colors of the L3P generated secene.
//    So it will assign defaults one (yellow skin, black hips, gray everything else
//    - skeletons are rendered all white).
//    The code below defines the pre-set colors
//    You'll find instructions how to set your own colors right after this chucl of code

#ifndef (MYellow)
#declare MYellow = #if (version >= 3.1) material { #end texture {
	pigment { srgb <1,0.905882,0.211765> }
	finish { ambient .1 diffuse .85 }
	#if (QUAL > 1)
		finish { phong 0.5 phong_size 40 reflection 0.08 }
		#if (BUMPS) normal { BUMPNORMAL } #end
	#end
} #if (version >= 3.1) } #end
#end

#ifndef (MWHite)
#declare MWHite = #if (version >= 3.1) material { #end texture {
	pigment { srgb <1,1,1> }
	finish { ambient AMB diffuse DIF }
	#if (QUAL > 1)
		finish { phong 0.5 phong_size 40 reflection 0.08 }
		#if (BUMPS) normal { BUMPNORMAL } #end
	#end
} #if (version >= 3.1) } #end
#end

#ifndef (Mgray)
#declare Mgray = #if (version >= 3.1) material { #end texture {
	pigment { srgb <0.682353,0.682353,0.682353> }
	finish { ambient AMB diffuse DIF }
	#if (QUAL > 1)
		finish { phong 0.5 phong_size 40 reflection 0.08 }
		#if (BUMPS) normal { BUMPNORMAL } #end
	#end
} #if (version >= 3.1) } #end
#end 

#ifndef (Mblack)
#declare Mblack = #if (version >= 3.1) material { #end texture {
	pigment { srgb <0.301961,0.301961,0.301961> }
	finish { ambient AMB diffuse DIF }
	#if (QUAL > 1)
		finish { phong 0.5 phong_size 40 reflection 0.08 }
		#if (BUMPS) normal { BUMPNORMAL } #end
	#end
} #if (version >= 3.1) } #end
#end 

// You can re-specify colors with the following parameters
// Type them into you file BEFORE the line you typed earlier (#include "LMM_A02i.inc")

// #declare M_L_Leg_Color=(Color as identified in the L3P code) // Left leg color
// #declare M_R_Leg_Color= (Color as identified in the L3P code)// Right leg color
// #declare M_R_Arm_Color= (Color as identified in the L3P code)// Right arm color
// #declare M_L_Arm_Color=Color1 (Color as identified in the L3P code)// Left arm color
// #declare M_Torso_Color=Color28 (Color as identified in the L3P code)// Torso color
// #declare M_Hips_Color=Color0 (Color as identified in the L3P code)// Hips color
// #declare M_Hat_Color=Color6 (Color as identified in the L3P code)// Hat color
// #declare M_Flesh_Color=Color15 (Color as identified in the L3P code)// Head & "flesh" color (defaults to yellow if not defined) 
// #declare M_R_Hand_Color=Color15 (Color as identified in the L3P code)// Right hand color (as identified in the L3P code -defaults to M_Flesh_Color if not defined)
// #declare M_L_Hand_Color=Color15 (Color as identified in the L3P code) // Left hand color (as identified in the L3P code -defaults to M_Flesh_Color if not defined)

// If the colors above are not specified, the defualt ones are set by the code below

#ifndef(M_R_Leg_Color) #declare M_R_Leg_Color=Mgray #end // Default left leg color: gray
#ifndef(M_L_Leg_Color) #declare M_L_Leg_Color=Mgray #end // Default right leg color: gray
#ifndef(M_R_Arm_Color) #declare M_R_Arm_Color=Mgray #end // Default right arm color: gray
#ifndef(M_L_Arm_Color) #declare M_L_Arm_Color=Mgray #end // Default left armcolor: gray
#ifndef(M_R_Hand_Color) #declare M_R_Hand_Color=Mgray #end // Default right arm color: gray
#ifndef(M_L_Hand_Color) #declare M_L_Hand_Color=Mgray #end // Default left armcolor: gray
#ifndef(M_Torso_Color) #declare M_Torso_Color=Mgray #end // Default torso color: gray
#ifndef(M_Hips_Color) #declare M_Hips_Color=Mblack #end // Default hips color: black 
#ifndef(M_Hat_Color) #declare M_Hat_Color=Mgray #end // Default hat color: gray
#ifndef(M_Head_Color) #declare M_Head_Color=Mgray #end // Default hat color: gray
  

//******************************************************************************************************
// 9. The include file is pre-set to animate automatically the minifig in natural walking mode
//    However, it also includes two further levels of customization

//    In the first level,
//    you can set general movement modes by selecting between 4 LM_mode presets
//
//    0 = walk slowly (1 stud per step - not realistic - legacy) 
//    1 = walk (default - 2 studs per step - not realistic - legacy)
//    2 = run  (3 studs per step - not realistic - legacy)
//    3 = run fast (4 studs per step - not realistic - legacy) 

//    4 = Natural Walk (default - 1 stud per step)

//    Type them into you file BEFORE the line you typed earlier (#include "LMM_A02i.inc")


#ifndef(LM_mode) #declare LM_mode= 2; #end // if LM_mode is not set, LM_mode is set to 4


//    With the second level of customization, you can set the values
//    for the individual parts or sets of limbs of the minifig
//    By typing the value below in the minifig POVray file
//    file BEFORE the line containing #include "m_walk.inc"

//    #declare L_Amplitude = //Length of the arc made by the legs
//    #declare A_Amplitude =  //Length of the arc made by the legs
//    #declare H_Amplitude =  //Length of the arc made by the head (side to side)

//    #declare step_height =  //Height of the vertical oscillation as the minifig moves)
 
//    #declare step_length = // Lenght of the step (1 stud = 20)

//    IMPORTANT: Note that by assigning 0 to step_length, the minifig will make a walking motion
//    but stay in place

    #declare step_length = 0;



#switch (LM_mode)
        #case (0) 
                #ifndef(L_Amplitude) #declare L_Amplitude = 25; #end
                #ifndef(A_Amplitude) #declare A_Amplitude = 10; #end
                #ifndef(H_Amplitude) #declare H_Amplitude = 0; #end
                #ifndef (step_height) #declare step_height = 5; #end
                #ifndef (step_length) #declare step_length = 40; #end 
        #break
        #case (1) 
                #ifndef(L_Amplitude) #declare L_Amplitude = 50; #end
                #ifndef(A_Amplitude) #declare A_Amplitude = 30; #end
                #ifndef(H_Amplitude) #declare H_Amplitude = 0; #end
                #ifndef (step_height) #declare step_height = 2; #end
                #ifndef (step_length) #declare step_length = 80; #end         
        #break
        #case (2) 
                #ifndef(L_Amplitude) #declare L_Amplitude = 70; #end
                #ifndef(A_Amplitude) #declare A_Amplitude = 65; #end
                #ifndef(H_Amplitude) #declare H_Amplitude = 0; #end
                #ifndef (step_height) #declare step_height = 7.5; #end
                #ifndef (step_length) #declare step_length = 120; #end         
        #break
        #case (3) 
                #ifndef(L_Amplitude) #declare L_Amplitude = 100; #end
                #ifndef(A_Amplitude) #declare A_Amplitude = 90; #end
                #ifndef(H_Amplitude) #declare H_Amplitude = 0; #end
                #ifndef (step_height) #declare step_height = 10; #end
                #ifndef (step_length) #declare step_length = 160; #end         
        #break 
        #case (4) //This is the most realistic walking mode
                #ifndef(L_Amplitude) #declare L_Amplitude = 30; #end
                #ifndef(A_Amplitude) #declare A_Amplitude = 20; #end
                #ifndef(H_Amplitude) #declare H_Amplitude = 0; #end
                #ifndef (step_height) #declare step_height = 0; #end //Admits tiny (<4) alterations that give a "jumpy character" to a minfig
                #ifndef (step_length) #declare step_length = 40; #end         
        #break
#end 





//******************************************************************************************************
//10. That's it for now - make 'em sweat!!

//    To insert the minifig in a scene, the best way is to create 2 ldraw files
//    One with the minifig, one with the scene
//    (For now, the scene has to be set so that the minifig's starting point is 0,0,0)
//    Convert both ldraw files into POVray files
//    Open both files in POVray and use the minifig file as explained above
//    Delete any camera, light, background and floor definitions from the scene file
//    Add in the minifig file a line like the one below
//    #include "scene.pov"
//    (Replace "scene.pov" with the name of your scene POVray file)
//    (By the way, it doesn't matter if this line is included before or after
//    the include settings explained above



//******************************************************************************************************

//    Things I hope to add in the future:

//    *  Individual limb movement - this would enable the user to make the minifig "act" and not just walk
//       - or simply move its head ;-)

//    *  Multiple minifig support - I think I know a reaaaally uuuuuugly way how to do it.

//    *  Goes with the above - a quick'n'dirty hack would be to reassign it like the colors

//    *  Maybe break free of the step/clock alingment. I kind of like it though ...

//    *  Any ideas you have are welcome and encouraged!

//    Email technicpuppy@yahoo.com or visit the CAD and animation forums of Lugnet



#declare _animated_minifig = union {   //Creates an single object with the minifigs parts

      
                 
//hips
	object {_3815_dot_dat matrix <1-SW/36,0,0,0,1-SW/32,0,0,0,1-SW/20,0,SW/6.4,0>
	matrix <1,0,0,0,1,0,0,0,1,0,32,0> material{ M_Hips_Color }}
//right arm
	object {_3818_dot_dat matrix <1,0,0,0,1,0,0,0,1,0,0,0>
	rotate<-A_Amplitude*sin( clock*2*pi)+30,0, 9.792>translate<-15.552,9,0>
	material{ M_R_Arm_Color }}                                                                  
//left arm
	object {_3819_dot_dat matrix <1,0,0,0,1,0,0,0,1,0,0,0>
	rotate<A_Amplitude*sin( clock*2*pi)+30,0,-9.792>translate<15.552,9,0>
	material{ M_L_Arm_Color }}
//right hand
	object {_3820_dot_dat matrix <1,0,0,0,.707,.707,0,-.707,.707,-5.198,18.753,-10.321>
	rotate<-A_Amplitude*sin( clock*2*pi)+30,0, 9.792>translate<-15.552,9,0>
	material{ M_R_Hand_Color } }
//left hand
	object {_3820_dot_dat matrix <1,0,0,0,.707,.707,0,-.707,.707,5.198,18.753,-10.321>
	rotate<A_Amplitude*sin( clock*2*pi)+30,0, -9.792>translate<15.552,9,0>
	material{ M_L_Hand_Color }  }

//HEADS
//The code below identifies the head part used by the minifig and alters it according to the animation parameters

#ifdef (_3626a_dot_dat) #declare LMM_head = _3626a_dot_dat;  #end
#ifdef (_3626ap01_dot_dat) #declare LMM_head = _3626ap01_dot_dat;  #end
#ifdef (_3626bp01_dot_dat) #declare LMM_head = _3626bp01_dot_dat;  #end
#ifdef (_3626bpa2_dot_dat) #declare LMM_head = _3626bpa2_dot_dat;  #end
#ifdef (_3626bp7b_dot_dat) #declare LMM_head = _3626bp7b_dot_dat;  #end
#ifdef (_3626bp7a_dot_dat) #declare LMM_head = _3626bp7a_dot_dat;  #end
#ifdef (_3626bpa6_dot_dat) #declare LMM_head = _3626bpa6_dot_dat;  #end
#ifdef (_3626bp39_dot_dat) #declare LMM_head = _3626bp39_dot_dat;  #end
#ifdef (_3626bpa1_dot_dat) #declare LMM_head = _3626bpa1_dot_dat;  #end
#ifdef (_3626bp69_dot_dat) #declare LMM_head = _3626bp69_dot_dat;  #end
#ifdef (_3626bp65_dot_dat) #declare LMM_head = _3626bp65_dot_dat;  #end
#ifdef (_3626bp62_dot_dat) #declare LMM_head = _3626bp62_dot_dat;  #end
#ifdef (_3626bp61_dot_dat) #declare LMM_head = _3626bp61_dot_dat;  #end
#ifdef (_3626bp3k_dot_dat) #declare LMM_head = _3626bp3k_dot_dat;  #end
#ifdef (_3626bp3j_dot_dat) #declare LMM_head = _3626bp3j_dot_dat;  #end
#ifdef (_3626bp31_dot_dat) #declare LMM_head = _3626bp31_dot_dat;  #end
#ifdef (_3626bp30_dot_dat) #declare LMM_head = _3626bp30_dot_dat;  #end
#ifdef (_3626bp40_dot_dat) #declare LMM_head = _3626bp40_dot_dat;  #end
#ifdef (_3626bp34_dot_dat) #declare LMM_head = _3626bp34_dot_dat;  #end
#ifdef (_3626bp33_dot_dat) #declare LMM_head = _3626bp33_dot_dat;  #end
#ifdef (_3626bp32_dot_dat) #declare LMM_head = _3626bp32_dot_dat;  #end
#ifdef (_3626bpa7_dot_dat) #declare LMM_head = _3626bpa7_dot_dat;  #end
#ifdef (_3626bp3n_dot_dat) #declare LMM_head = _3626bp3n_dot_dat;  #end
#ifdef (_3626bp3q_dot_dat) #declare LMM_head = _3626bp3q_dot_dat;  #end
#ifdef (_3626bp63_dot_dat) #declare LMM_head = _3626bp63_dot_dat;  #end
#ifdef (_3626bpa3_dot_dat) #declare LMM_head = _3626bpa3_dot_dat;  #end
#ifdef (_3626bp05_dot_dat) #declare LMM_head = _3626bp05_dot_dat;  #end
#ifdef (_3626bp03_dot_dat) #declare LMM_head = _3626bp03_dot_dat;  #end
#ifdef (_3626bp04_dot_dat) #declare LMM_head = _3626bp04_dot_dat;  #end
#ifdef (_3626bp06_dot_dat) #declare LMM_head = _3626bp06_dot_dat;  #end
#ifdef (_3626bp02_dot_dat) #declare LMM_head = _3626bp02_dot_dat;  #end
#ifdef (_3626bpa5_dot_dat) #declare LMM_head = _3626bpa5_dot_dat;  #end
#ifdef (_3626bpsb_dot_dat) #declare LMM_head = _3626bpsb_dot_dat;  #end
#ifdef (_3626bps7_dot_dat) #declare LMM_head = _3626bps7_dot_dat;  #end
#ifdef (_3626bps9_dot_dat) #declare LMM_head = _3626bps9_dot_dat;  #end
#ifdef (_3626bps2_dot_dat) #declare LMM_head = _3626bps2_dot_dat;  #end
#ifdef (_3626bps8_dot_dat) #declare LMM_head = _3626bps8_dot_dat;  #end
#ifdef (_3626bps4_dot_dat) #declare LMM_head = _3626bps4_dot_dat;  #end
#ifdef (_3626bpsc_dot_dat) #declare LMM_head = _3626bpsc_dot_dat;  #end
#ifdef (_3626bpse_dot_dat) #declare LMM_head = _3626bpse_dot_dat;  #end
#ifdef (_3626bps3_dot_dat) #declare LMM_head = _3626bps3_dot_dat;  #end
#ifdef (_3626bps5_dot_dat) #declare LMM_head = _3626bps5_dot_dat;  #end
#ifdef (_3626bpst_dot_dat) #declare LMM_head = _3626bpst_dot_dat;  #end
#ifdef (_3626bpac_dot_dat) #declare LMM_head = _3626bpac_dot_dat;  #end
#ifdef (_3626bpa4_dot_dat) #declare LMM_head = _3626bpa4_dot_dat;  #end
#ifdef (_3626bpa9_dot_dat) #declare LMM_head = _3626bpa9_dot_dat;  #end
#ifdef (_30378_dot_dat) #declare LMM_head = _30378_dot_dat;  #end
#ifdef (_82359_dot_dat) #declare LMM_head = _82359_dot_dat;  #end
#ifdef (_3626b_dot_dat) #declare LMM_head = _3626b_dot_dat;  #end  

#ifdef (LMM_head)
        object {LMM_head matrix <1,0,0,0,1,0,0,0,1,0,0,0> rotate<0,H_Amplitude,0> translate<0,-24,0> material{ M_Head_Color }}
#end



//HATS
//The code below identifies the hat part used by the minifig and alters it according to the animation parameters
#ifdef (_4485_dot_dat) #declare LMM_hat = _4485_dot_dat;  #end
#ifdef (_30171_dot_dat) #declare LMM_hat = _30171_dot_dat;  #end
#ifdef (_3896_dot_dat) #declare LMM_hat = _3896_dot_dat;  #end
#ifdef (_3844_dot_dat) #declare LMM_hat = _3844_dot_dat;  #end
#ifdef (_3833_dot_dat) #declare LMM_hat = _3833_dot_dat;  #end
#ifdef (_3834_dot_dat) #declare LMM_hat = _3834_dot_dat;  #end
#ifdef (_3901_dot_dat) #declare LMM_hat = _3901_dot_dat;  #end
#ifdef (_6093_dot_dat) #declare LMM_hat = _6093_dot_dat;  #end
#ifdef (_6093a_dot_dat) #declare LMM_hat = _6093a_dot_dat;  #end
#ifdef (_2528_dot_dat) #declare LMM_hat = _2528_dot_dat;  #end
#ifdef (_3629_dot_dat) #declare LMM_hat = _3629_dot_dat;  #end
#ifdef (_71015_dot_dat) #declare LMM_hat = _71015_dot_dat;  #end
#ifdef (_2545_dot_dat) #declare LMM_hat = _2545_dot_dat;  #end
#ifdef (_2544_dot_dat) #declare LMM_hat = _2544_dot_dat;  #end
#ifdef (_2544c01_dot_dat) #declare LMM_hat = _2544c01_dot_dat;  #end
#ifdef (_2446_dot_dat) #declare LMM_hat = _2446_dot_dat;  #end
#ifdef (_193_dot_dat) #declare LMM_hat = _193_dot_dat;  #end
#ifdef (_3624_dot_dat) #declare LMM_hat = _3624_dot_dat;  #end
#ifdef (_3878_dot_dat) #declare LMM_hat = _3878_dot_dat;  #end
#ifdef (_6131_dot_dat) #declare LMM_hat = _6131_dot_dat;  #end 

#ifdef (LMM_hat)
        object {LMM_hat matrix <1,0,0,0,1,0,0,0,1,0,0,0> rotate<0,H_Amplitude,0> translate<0,-24,0> material{ M_Hat_Color }}
#end



//TORSOS
//The code below identifies the torso part used by the minifig and alters it according to the animation parameters
#ifdef (_973_dot_dat) #declare LMM_torso = _973_dot_dat;  #end
#ifdef (_973p23_dot_dat) #declare LMM_torso = _973p23_dot_dat;  #end
#ifdef (_973p14_dot_dat) #declare LMM_torso = _973p14_dot_dat;  #end
#ifdef (_973p29_dot_dat) #declare LMM_torso = _973p29_dot_dat;  #end
#ifdef (_973p16_dot_dat) #declare LMM_torso = _973p16_dot_dat;  #end
#ifdef (_973p09_dot_dat) #declare LMM_torso = _973p09_dot_dat;  #end
#ifdef (_973p7a_dot_dat) #declare LMM_torso = _973p7a_dot_dat;  #end
#ifdef (_973p7b_dot_dat) #declare LMM_torso = _973p7b_dot_dat;  #end
#ifdef (_973p27_dot_dat) #declare LMM_torso = _973p27_dot_dat;  #end
#ifdef (_973p1a_dot_dat) #declare LMM_torso = _973p1a_dot_dat;  #end
#ifdef (_973p43_dot_dat) #declare LMM_torso = _973p43_dot_dat;  #end
#ifdef (_973p6b_dot_dat) #declare LMM_torso = _973p6b_dot_dat;  #end
#ifdef (_973p52_dot_dat) #declare LMM_torso = _973p52_dot_dat;  #end
#ifdef (_973p51_dot_dat) #declare LMM_torso = _973p51_dot_dat;  #end
#ifdef (_973p4n_dot_dat) #declare LMM_torso = _973p4n_dot_dat;  #end
#ifdef (_973p1b_dot_dat) #declare LMM_torso = _973p1b_dot_dat;  #end
#ifdef (_973p6c_dot_dat) #declare LMM_torso = _973p6c_dot_dat;  #end
#ifdef (_973p1d_dot_dat) #declare LMM_torso = _973p1d_dot_dat;  #end
#ifdef (_973p3r_dot_dat) #declare LMM_torso = _973p3r_dot_dat;  #end
#ifdef (_973p3n_dot_dat) #declare LMM_torso = _973p3n_dot_dat;  #end
#ifdef (_973p70_dot_dat) #declare LMM_torso = _973p70_dot_dat;  #end
#ifdef (_973pa5_dot_dat) #declare LMM_torso = _973pa5_dot_dat;  #end
#ifdef (_973p3b_dot_dat) #declare LMM_torso = _973p3b_dot_dat;  #end
#ifdef (_973p40_dot_dat) #declare LMM_torso = _973p40_dot_dat;  #end
#ifdef (_973p41_dot_dat) #declare LMM_torso = _973p41_dot_dat;  #end
#ifdef (_973p42_dot_dat) #declare LMM_torso = _973p42_dot_dat;  #end
#ifdef (_973p4g_dot_dat) #declare LMM_torso = _973p4g_dot_dat;  #end
#ifdef (_973p47_dot_dat) #declare LMM_torso = _973p47_dot_dat;  #end
#ifdef (_973p2a_dot_dat) #declare LMM_torso = _973p2a_dot_dat;  #end
#ifdef (_973p90_dot_dat) #declare LMM_torso = _973p90_dot_dat;  #end
#ifdef (_973p4b_dot_dat) #declare LMM_torso = _973p4b_dot_dat;  #end
#ifdef (_973p8a_dot_dat) #declare LMM_torso = _973p8a_dot_dat;  #end
#ifdef (_973p38_dot_dat) #declare LMM_torso = _973p38_dot_dat;  #end
#ifdef (_973p21_dot_dat) #declare LMM_torso = _973p21_dot_dat;  #end
#ifdef (_973p46_dot_dat) #declare LMM_torso = _973p46_dot_dat;  #end
#ifdef (_973p50_dot_dat) #declare LMM_torso = _973p50_dot_dat;  #end
#ifdef (_973p49_dot_dat) #declare LMM_torso = _973p49_dot_dat;  #end
#ifdef (_973p48_dot_dat) #declare LMM_torso = _973p48_dot_dat;  #end
#ifdef (_973p4q_dot_dat) #declare LMM_torso = _973p4q_dot_dat;  #end
#ifdef (_973p61_dot_dat) #declare LMM_torso = _973p61_dot_dat;  #end
#ifdef (_973p72_dot_dat) #declare LMM_torso = _973p72_dot_dat;  #end
#ifdef (_973p1j_dot_dat) #declare LMM_torso = _973p1j_dot_dat;  #end
#ifdef (_973pa8_dot_dat) #declare LMM_torso = _973pa8_dot_dat;  #end
#ifdef (_973p28_dot_dat) #declare LMM_torso = _973p28_dot_dat;  #end
#ifdef (_973p4u_dot_dat) #declare LMM_torso = _973p4u_dot_dat;  #end
#ifdef (_973pac_dot_dat) #declare LMM_torso = _973pac_dot_dat;  #end
#ifdef (_973p68_dot_dat) #declare LMM_torso = _973p68_dot_dat;  #end
#ifdef (_973pn6_dot_dat) #declare LMM_torso = _973pn6_dot_dat;  #end
#ifdef (_973pn5_dot_dat) #declare LMM_torso = _973pn5_dot_dat;  #end
#ifdef (_973ps6_dot_dat) #declare LMM_torso = _973ps6_dot_dat;  #end
#ifdef (_973p34_dot_dat) #declare LMM_torso = _973p34_dot_dat;  #end
#ifdef (_973p26_dot_dat) #declare LMM_torso = _973p26_dot_dat;  #end
#ifdef (_973pa2_dot_dat) #declare LMM_torso = _973pa2_dot_dat;  #end
#ifdef (_973p36_dot_dat) #declare LMM_torso = _973p36_dot_dat;  #end
#ifdef (_973p3c_dot_dat) #declare LMM_torso = _973p3c_dot_dat;  #end
#ifdef (_973p39_dot_dat) #declare LMM_torso = _973p39_dot_dat;  #end
#ifdef (_973p30_dot_dat) #declare LMM_torso = _973p30_dot_dat;  #end
#ifdef (_973p3a_dot_dat) #declare LMM_torso = _973p3a_dot_dat;  #end
#ifdef (_973p32_dot_dat) #declare LMM_torso = _973p32_dot_dat;  #end
#ifdef (_973p33_dot_dat) #declare LMM_torso = _973p33_dot_dat;  #end
#ifdef (_973p31_dot_dat) #declare LMM_torso = _973p31_dot_dat;  #end
#ifdef (_973p25_dot_dat) #declare LMM_torso = _973p25_dot_dat;  #end
#ifdef (_973p24_dot_dat) #declare LMM_torso = _973p24_dot_dat;  #end
#ifdef (_973p1c_dot_dat) #declare LMM_torso = _973p1c_dot_dat;  #end
#ifdef (_973p6d_dot_dat) #declare LMM_torso = _973p6d_dot_dat;  #end
#ifdef (_973p1e_dot_dat) #declare LMM_torso = _973p1e_dot_dat;  #end
#ifdef (_973p3s_dot_dat) #declare LMM_torso = _973p3s_dot_dat;  #end
#ifdef (_973p3q_dot_dat) #declare LMM_torso = _973p3q_dot_dat;  #end
#ifdef (_973p71_dot_dat) #declare LMM_torso = _973p71_dot_dat;  #end
#ifdef (_973p22_dot_dat) #declare LMM_torso = _973p22_dot_dat;  #end
#ifdef (_973p17_dot_dat) #declare LMM_torso = _973p17_dot_dat;  #end
#ifdef (_973p4t_dot_dat) #declare LMM_torso = _973p4t_dot_dat;  #end
#ifdef (_973p8b_dot_dat) #declare LMM_torso = _973p8b_dot_dat;  #end
#ifdef (_973p12_dot_dat) #declare LMM_torso = _973p12_dot_dat;  #end
#ifdef (_973p63_dot_dat) #declare LMM_torso = _973p63_dot_dat;  #end
#ifdef (_973paj_dot_dat) #declare LMM_torso = _973paj_dot_dat;  #end
#ifdef (_973p4e_dot_dat) #declare LMM_torso = _973p4e_dot_dat;  #end
#ifdef (_973p4d_dot_dat) #declare LMM_torso = _973p4d_dot_dat;  #end
#ifdef (_973pa7_dot_dat) #declare LMM_torso = _973pa7_dot_dat;  #end
#ifdef (_973pa3_dot_dat) #declare LMM_torso = _973pa3_dot_dat;  #end
#ifdef (_973pa6_dot_dat) #declare LMM_torso = _973pa6_dot_dat;  #end
#ifdef (_973pn0_dot_dat) #declare LMM_torso = _973pn0_dot_dat;  #end
#ifdef (_973pn1_dot_dat) #declare LMM_torso = _973pn1_dot_dat;  #end
#ifdef (_973p60_dot_dat) #declare LMM_torso = _973p60_dot_dat;  #end
#ifdef (_973p62_dot_dat) #declare LMM_torso = _973p62_dot_dat;  #end
#ifdef (_973p69_dot_dat) #declare LMM_torso = _973p69_dot_dat;  #end
#ifdef (_973p66_dot_dat) #declare LMM_torso = _973p66_dot_dat;  #end
#ifdef (_973p13_dot_dat) #declare LMM_torso = _973p13_dot_dat;  #end
#ifdef (_973p2c_dot_dat) #declare LMM_torso = _973p2c_dot_dat;  #end
#ifdef (_973p45_dot_dat) #declare LMM_torso = _973p45_dot_dat;  #end
#ifdef (_973p18_dot_dat) #declare LMM_torso = _973p18_dot_dat;  #end
#ifdef (_973p83_dot_dat) #declare LMM_torso = _973p83_dot_dat;  #end
#ifdef (_973pa1_dot_dat) #declare LMM_torso = _973pa1_dot_dat;  #end
#ifdef (_973ps5_dot_dat) #declare LMM_torso = _973ps5_dot_dat;  #end
#ifdef (_973psb_dot_dat) #declare LMM_torso = _973psb_dot_dat;  #end
#ifdef (_973psm_dot_dat) #declare LMM_torso = _973psm_dot_dat;  #end
#ifdef (_973ps7_dot_dat) #declare LMM_torso = _973ps7_dot_dat;  #end
#ifdef (_973psq_dot_dat) #declare LMM_torso = _973psq_dot_dat;  #end
#ifdef (_973psn_dot_dat) #declare LMM_torso = _973psn_dot_dat;  #end
#ifdef (_973ps2_dot_dat) #declare LMM_torso = _973ps2_dot_dat;  #end
#ifdef (_973psc_dot_dat) #declare LMM_torso = _973psc_dot_dat;  #end
#ifdef (_973ps0_dot_dat) #declare LMM_torso = _973ps0_dot_dat;  #end
#ifdef (_973psa_dot_dat) #declare LMM_torso = _973psa_dot_dat;  #end
#ifdef (_973ps1_dot_dat) #declare LMM_torso = _973ps1_dot_dat;  #end
#ifdef (_973pse_dot_dat) #declare LMM_torso = _973pse_dot_dat;  #end
#ifdef (_973ps4_dot_dat) #declare LMM_torso = _973ps4_dot_dat;  #end
#ifdef (_973psk_dot_dat) #declare LMM_torso = _973psk_dot_dat;  #end
#ifdef (_973ps3_dot_dat) #declare LMM_torso = _973ps3_dot_dat;  #end
#ifdef (_973pab_dot_dat) #declare LMM_torso = _973pab_dot_dat;  #end
#ifdef (_973p19_dot_dat) #declare LMM_torso = _973p19_dot_dat;  #end
#ifdef (_973p4r_dot_dat) #declare LMM_torso = _973p4r_dot_dat;  #end
#ifdef (_973p64_dot_dat) #declare LMM_torso = _973p64_dot_dat;  #end
#ifdef (_973p02_dot_dat) #declare LMM_torso = _973p02_dot_dat;  #end
#ifdef (_973p01_dot_dat) #declare LMM_torso = _973p01_dot_dat;  #end
#ifdef (_973p73_dot_dat) #declare LMM_torso = _973p73_dot_dat;  #end
#ifdef (_973p74_dot_dat) #declare LMM_torso = _973p74_dot_dat;  #end
#ifdef (_973p20_dot_dat) #declare LMM_torso = _973p20_dot_dat;  #end
#ifdef (_973pdg_dot_dat) #declare LMM_torso = _973pdg_dot_dat;  #end
#ifdef (_973p03_dot_dat) #declare LMM_torso = _973p03_dot_dat;  #end
#ifdef (_973pa4_dot_dat) #declare LMM_torso = _973pa4_dot_dat;  #end
#ifdef (_973p44_dot_dat) #declare LMM_torso = _973p44_dot_dat;  #end
#ifdef (_973p6e_dot_dat) #declare LMM_torso = _973p6e_dot_dat;  #end
#ifdef (_30375_dot_dat) #declare LMM_torso = _30375_dot_dat;  #end
#ifdef (_6260_dot_dat) #declare LMM_torso = _6260_dot_dat;  #end
#ifdef (_17_dot_dat) #declare LMM_torso = _17_dot_dat;  #end 

#ifdef (LMM_torso)
        object {LMM_torso matrix <1,0,0,0,1,0,0,0,1,0,0,0> material{ M_Torso_Color }}
#end



//LEFT LEG 
//The code below identifies the left leg part used by the minifig and alters it according to the animation parameters

#ifdef (_3817_dot_dat) #declare LMM_l_leg = _3817_dot_dat;  #end
#ifdef (_971_dot_dat) #declare LMM_l_leg = _971_dot_dat;  #end
#ifdef (_971p3j_dot_dat) #declare LMM_l_leg = _971p3j_dot_dat;  #end
#ifdef (_971pa2_dot_dat) #declare LMM_l_leg = _971pa2_dot_dat;  #end
#ifdef (_971p4f_dot_dat) #declare LMM_l_leg = _971p4f_dot_dat;  #end
#ifdef (_971p63_dot_dat) #declare LMM_l_leg = _971p63_dot_dat;  #end
#ifdef (_971ps5_dot_dat) #declare LMM_l_leg = _971ps5_dot_dat;  #end
#ifdef (_773_dot_dat) #declare LMM_l_leg = _773_dot_dat;  #end 

#ifdef (LMM_l_leg)
	object {LMM_l_leg matrix <1,0,0,0,1,0,0,0,1,0,0,0> #if (-L_Amplitude*sin((clock)*2*pi) < -1) rotate<-L_Amplitude*sin( clock*2*pi),0, 0,> #else rotate<(-L_Amplitude*sin( clock*2*pi))/4,0, 0,> #end translate<0,44,0> material{ M_L_Leg_Color }}
#end

//RIGHT LEG
//The code below identifies the right leg part used by the minifig and alters it according to the animation parameters

#ifdef (_3816_dot_dat) #declare LMM_r_leg = _3816_dot_dat;  #end
#ifdef (_972_dot_dat) #declare LMM_r_leg = _972_dot_dat;  #end
#ifdef (_972p3j_dot_dat) #declare LMM_r_leg = _972p3j_dot_dat;  #end
#ifdef (_972pa2_dot_dat) #declare LMM_r_leg = _972pa2_dot_dat;  #end
#ifdef (_972p4f_dot_dat) #declare LMM_r_leg = _972p4f_dot_dat;  #end
#ifdef (_972p63_dot_dat) #declare LMM_r_leg = _972p63_dot_dat;  #end
#ifdef (_773_dot_dat) #declare LMM_r_leg = _773_dot_dat;  #end 

#ifdef (LMM_r_leg)
        object {LMM_r_leg matrix <1,0,0,0,1,0,0,0,1,0,0,0> #if (+L_Amplitude*sin((clock)*2*pi) < -1) rotate<+L_Amplitude*sin( clock*2*pi),0, 0,> #else rotate<(+L_Amplitude*sin( clock*2*pi))/4,0, 0,> #end  translate<0,44,0> material{ M_R_Leg_Color }}
#end

}


//RIGHT LEG
//The code below applies the walking parameters that affect to the whole figure

#declare step_height_mid =abs(sin( clock*2*pi))*step_height; 

object {  _animated_minifig
 rotate <abs(sin( clock*2*pi))*3,0,0>//Make minfig "fall forward while taking the step" 

translate < 0, -step_height_mid-72, clock * -step_length> 
//  #if (version >= 3.1) material #else texture #end { Color7 }   
rotate y * floor(clock) * 90

no_image
  }
 


plane
{
	y, 0
	pigment {color srgb 1}
	finish
	{
		ambient 0
		diffuse 1
	}
}
